En este fichero voy a explicar los pasos que tengo que seguir para hacer el proyecto

- ESPECIFICACIONES DEL PROYECTO:
    - Tu programa deberá ser ejecutado así:
        ./pipex file1 cmd1 cmd2 file2
            file1 & file2 son ficheros
            cmd1 & cmd2 son comandos de shell con sus agumentos

    - Tendrá que hacer exactamente lo mismo que el siguiente comando shell
        $> < file1 cmd1 | cmd2 > file2
            Echemos un ojo a esto en detalle con el ejemplo "< infile grep ejemplo | wc -w > outfile"
            - "infile":
                contiene "Hola esto es un ejemplo"
            - "<":
                Es un simbolo de "redireccion de entrada"
                Redirige el contenido del fichero a la entrada estandar para que cuando grep esté leyendo de la entrada estandar, tome el contenido del fichero infile
            
            - "|":
                La | (tuberia) redirige la salida del comando de la izquierda a la entrada del comando a la derecha.
                En ese caso, el simbolo | redirige la salida del comando grep a la entrada del comando wc
                Sin la tubería, la salida del comando grep se escribe directamente en la salida estandar.
                    "Hola esto es un ejemplo" // Nos devuelve la linea por salida estandar donde ha encontrado "ejemplo"
                Cuando introducimos el pipe (< infile grep ejemplo | wc -w) obtenemos:
                    5 //Que son las palabras que cuenta con el comando "wc -c"

            - ">":
                Es un simbolo de "redireccion de salida"
                Redirige el contenido del resultado del comando wc (tras el pipe) al fichero outfile
                
    - Tu programa no deberá dar leaks de memoria !

- OBJETIVO DEL PROYECTO:
    - Desarrollar un programa que simule las tuberias en el shell
    
- INFORMACION IMPORTANTE:
    - Este programa requiere usar muchas funciones nuevas que nunca hemos usado antes. Explicaré un poco sobre ellas más tarde
    - 

- FUNCIONES QUE UTILIZAREMOS
    - acces(): Acceder a ficheros y comprobar permisos
    - dup2(): Crear un nuevo fd asociado a un archivo ya existente
    - pipe(): Crea una tuberia para la comunicacion entre procesos
    - fork(): Crea un nuevo proceso duplicando el llamante
    - waitpid(): Espera hasta que el proceso especificado haya terminado
    - wait(): Espera hasta que algun proceso hijo haya terminado
    - execve(): Ejecuta un programa en un nuevo proceso
    - unlink(): Elimina un enlace a un archivo existente.

- ALGORITMO:
    1. Parsear:
        La entrada debe ser correcta. 5 argumenos con sus correspondientes permisos
    2. Pasar el primer fichero al primer comando, ejecutar el comando y generar la salida
    3. Mediante la tuberia, pasarle esta salida al siguiente comando
    4. Ejecutar el comando y pasarlo al segundo fichero de salida

La tubería debe comunicar los dos procesos.
El paso 2 lo haremos en el proceso hijo
El paso 3 lo haremos en el proceso padre
